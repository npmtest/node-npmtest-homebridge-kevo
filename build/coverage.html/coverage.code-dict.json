{"/home/travis/build/npmtest/node-npmtest-homebridge-kevo/test.js":"/* istanbul instrument in package npmtest_homebridge_kevo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-kevo/lib.npmtest_homebridge_kevo.js":"/* istanbul instrument in package npmtest_homebridge_kevo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_homebridge_kevo = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_homebridge_kevo = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-kevo/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-homebridge-kevo && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_homebridge_kevo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_homebridge_kevo\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_homebridge_kevo.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_homebridge_kevo.rollup.js'] =\n            local.assetsDict['/assets.npmtest_homebridge_kevo.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_homebridge_kevo.__dirname + '/lib.npmtest_homebridge_kevo.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-kevo/node_modules/homebridge-kevo/index.js":"var request = require('request').defaults({jar: true/*, proxy:\"http://localhost:8888\", strictSSL:false*/}); // use cookies\nvar cheerio = require('cheerio');\nvar Service, Characteristic;\n\nmodule.exports = function(homebridge) {\n  Service = homebridge.hap.Service;\n  Characteristic = homebridge.hap.Characteristic;\n\n  homebridge.registerAccessory(\"homebridge-kevo\", \"Kevo\", KevoAccessory);\n}\n\nvar lockOrder = 0;\nvar lockEventSpacing = 15000;\nvar lockEventsOccurring = 0;\n\nfunction KevoAccessory(log, config) {\n  this.log = log;\n  this.name = config[\"name\"];\n  this.username = config[\"username\"];\n  this.password = config[\"password\"];\n  this.lockId = config[\"lock_id\"];\n  this.lockOrder = lockOrder++;\n\n  this.service = new Service.LockMechanism(this.name);\n  \n  this.service\n    .getCharacteristic(Characteristic.LockCurrentState)\n    .on('get', this.getState.bind(this));\n  \n  this.service\n    .getCharacteristic(Characteristic.LockTargetState)\n    .on('get', this.getState.bind(this));\n  this.service\n    .getCharacteristic(Characteristic.LockTargetState)\n    .on('set', this.setState.bind(this));\n  \n  this._setup();\n}\n\nKevoAccessory.prototype._setup = function() {\n  this._login(function(err) {\n    if (err) {\n      this.log(\"There was a problem logging into Kevo. Check your username and password.\");\n      return;\n    } \n    else {\n      this._checkLockExists(function(err) {});\n    }\n  }.bind(this));\n}\n\nKevoAccessory.prototype._login = function(callback) {\n  var url = \"https://www.mykevo.com/login\";\n\n  var followRedirect = function(response) {\n    if (response.headers.location === \"https://www.mykevo.com/user/locks\") {\n      this.log(\"Already logged in.\");\n      callback(null);\n      return false; // don't follow this redirect, we're done\n    }\n    \n    return true; // ok redirect, sure\n  }.bind(this);\n\n  request(url, {followRedirect:followRedirect}, function (err, response, body) {\n    if (response.statusCode == 302) return; // we cancelled a redirect above\n    \n    if (!err && response.statusCode == 200 && response.headers['content-type'].indexOf(\"text/html\") == 0) {\n\n      var form = {\n        \"user[username]\": this.username,\n        \"user[password]\": this.password,\n        \"commit\": \"Sign In\"\n      };\n      \n      // the response is an HTML login page. Suck out the hidden input fields so we can simulate a form submit\n      var $ = cheerio.load(body);\n      var action = $('form').attr('action');\n      \n      $('input[type=hidden]').each(function(i, input) {\n        var name = $(input).attr('name');\n        var value = $(input).val();\n        form[name] = value;\n      });\n      \n      if (!action) {\n        this.log(\"Couldn't find form action.\");\n        this.log(body);\n        callback(err);\n        return;\n      }\n      \n      // Submit the login page\n      request.post(action, {form:form}, function(err, response, body) {\n        // we expect a redirect response\n        if (!err && response.statusCode == 302) {\n          this.log(\"Login successful.\");\n          callback(null);\n        }\n        else {\n          err = err || new Error(\"Bad status code \" + response.statusCode);\n          this.log(\"Error submitting login page: %s\", err);\n          callback(err);\n        }\n      }.bind(this));\n\n    }\n    else {\n      err = err || new Error(\"Invalid response code \" + response.statusCode)\n      this.log(\"Error requesting login page: %s\", err);\n      callback(err);\n    }\n  }.bind(this));\n}\n\nKevoAccessory.prototype._checkLockExists = function(callback) {\n  var url = \"https://www.mykevo.com/user/locks\";\n  \n  request(url, function(err, response, body) {\n    if (!err && response.statusCode == 200) {\n      var $ = cheerio.load(body);\n      var seenLockIds = [];\n      \n      // pull out all elements with \"data-lock-id\" defined\n      $('*[data-lock-id]').each(function(i, elem) {\n        var lockId = $(elem).attr('data-lock-id');\n\n        if (this.lockId == null && seenLockIds.indexOf(lockId) < 0) {\n          seenLockIds.push(lockId);\n        }\n        else if (lockId == this.lockId) {\n          callback(null);\n          return;\n        }\n      }.bind(this));\n\n      if (this.lockId == null) {\n        this.log(\"No lock ID specified, list of possible lock IDs: \");\n        this.log(seenLockIds);\n      }\n      else {\n        err = new Error(\"Could not locate lock with ID: %s\", this.lockId);\n        callback(err);\n      }\n    }\n    else {\n      err = err || new Error(\"Invalid status code \" + response.statusCode);\n      this.log(\"Error fetching lock: %s\", err);\n      callback(err);\n    }\n  }.bind(this));\n}\n\nKevoAccessory.prototype._getLockStatus = function(callback) {\n  var url = \"https://www.mykevo.com/user/remote_locks/command/lock.json\";\n  var qs = {\n    arguments: this.lockId\n  };\n  request(url, {qs:qs}, function(err, response, body) {\n\n    if (!err && response.statusCode == 200) {\n      var json = JSON.parse(body);\n      var state = json.bolt_state; // \"Unlocked\" or \"Locked\" or maybe \"Processing\" or \"Confirming\"\n      callback(null, state);\n    }\n    else {\n      err = err || new Error(\"Invalid status code \" + response.statusCode);\n      this.log(\"Error getting lock status: %s\", err);\n      callback(err);\n    }\n    \n  }.bind(this));\n}\n\nKevoAccessory.prototype._setLockStatus = function(status, callback) {\n  var url;\n  \n  if (status === \"Locked\") {\n    url = \"https://www.mykevo.com/user/remote_locks/command/remote_lock.json\";\n  }\n  else if (status === \"Unlocked\") {\n    url = \"https://www.mykevo.com/user/remote_locks/command/remote_unlock.json\";\n  }\n  else {\n    this.log(\"Invalid lock status %s\", status);\n    callback(new Error(\"Invalid lock status\"));\n    return;\n  }\n    \n  var qs = {\n    arguments: this.lockId\n  };\n  \n  request(url, {qs:qs}, function(err, response, body) {\n\n    if (!err && response.statusCode == 200) {\n      var json = JSON.parse(body);\n      \n      if (json.status_code !== 201) {\n        callback(new Error(\"Unexpected status_code \" + json.status_code));\n        return;\n      }\n      \n      // success!\n      callback(null);\n    }\n    else {\n      err = err || new Error(\"Invalid status code \" + response.statusCode);\n      this.log(\"Error setting lock status: %s\", err);\n      callback(err);\n    }\n    \n  }.bind(this));\n}\n\nKevoAccessory.prototype.getState = function(callback, state) {\n  if (!this.lockId) {\n    this.log(\"Lock has no ID assigned; can't get current state.\");\n    return;\n  }\n\n  this.log(\"Getting current state...\");\n    \n  this._login(function(err) {\n    if (err) {\n      callback(err);\n      return;\n    }\n    \n    this._getLockStatus(function(err, status) {\n\n      this.log(\"Lock status is %s\", status);\n      if (status === \"Locked\") {\n        callback(null, true); // success, locked\n      }\n      else if (status === \"Unlocked\") {\n        callback(null, false); // success, unlocked\n      }\n      else {\n        err = new Error(\"Invalid lock status '\"+status+\"'\");\n        this.log(\"Error getting state: %s\", err);\n        callback(err);\n      }\n\n    }.bind(this));\n  }.bind(this));\n}\n  \nKevoAccessory.prototype.setState = function(state, callback) {\n  if (!this.lockId) {\n    this.log(\"Lock has no ID assigned; can't set current state\");\n    return;\n  }\n\n  var kevoStatus = (state == Characteristic.LockTargetState.SECURED) ? \"Locked\" : \"Unlocked\";\n\n  this._login(function(err) {\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    var lockStatusCallback = function(err) {\n      if (err) {\n        this.log(\"Error setting state: %s\", err);\n        callback(err);\n        lockEventsOccurring--;\n        return;\n      }\n\n      // we succeeded, so update the \"current\" state as well\n      var currentState = (state == Characteristic.LockTargetState.SECURED) ?\n        Characteristic.LockCurrentState.SECURED : Characteristic.LockCurrentState.UNSECURED;\n      this.service\n        .setCharacteristic(Characteristic.LockCurrentState, currentState);\n      \n      // success\n      lockEventsOccurring--;\n      callback(null);\n      \n    }.bind(this);\n\n    if (lockEventsOccurring > 0) {\n      lockEventsOccurring++;\n      setTimeout(function() {\n        this.log(\"Setting status to %s\", kevoStatus);\n        this._setLockStatus(kevoStatus, lockStatusCallback);\n      }.bind(this), this.lockOrder * lockEventSpacing);\n    }\n    else {\n      lockEventsOccurring++;\n      this.log(\"Setting status to %s\", kevoStatus);\n      this._setLockStatus(kevoStatus, lockStatusCallback);\n    }\n  \n  }.bind(this));\n\n}\n\nKevoAccessory.prototype.getServices = function() {\n  return [this.service];\n}\n"}